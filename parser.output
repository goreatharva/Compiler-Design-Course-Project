Terminals unused in grammar

   FOR
   SCANF


Rules useless in parser due to conflicts

   44 arg_list: /* empty */


State 41 conflicts: 1 shift/reduce
State 68 conflicts: 12 shift/reduce
State 91 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: function_decl
    2        | program function_decl

    3 $@1: /* empty */

    4 function_decl: type IDENTIFIER '(' params ')' $@1 block

    5 params: /* empty */
    6       | param_list

    7 param_list: type IDENTIFIER
    8           | param_list ',' type IDENTIFIER

    9 $@2: /* empty */

   10 block: '{' $@2 stmt_list '}'

   11 stmt_list: /* empty */
   12          | stmt_list stmt

   13 stmt: expr ';'
   14     | type IDENTIFIER ';'
   15     | IF '(' expr ')' stmt
   16     | IF '(' expr ')' stmt ELSE stmt
   17     | WHILE '(' expr ')' stmt
   18     | RETURN expr ';'
   19     | block

   20 expr: expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr
   24     | expr '<' expr
   25     | expr '>' expr
   26     | expr LE expr
   27     | expr GE expr
   28     | expr EQ expr
   29     | expr NE expr
   30     | expr AND expr
   31     | expr OR expr
   32     | NOT expr
   33     | '-' expr
   34     | '+' expr
   35     | IDENTIFIER INC
   36     | IDENTIFIER DEC
   37     | INTEGER
   38     | STRING_LIT
   39     | IDENTIFIER
   40     | IDENTIFIER '=' expr
   41     | IDENTIFIER '(' ')'
   42     | IDENTIFIER '(' arg_list ')'
   43     | '(' expr ')'

   44 arg_list: /* empty */
   45         | arg_list_nonempty

   46 arg_list_nonempty: expr
   47                  | arg_list_nonempty ',' expr

   48 type: INT
   49     | FLOAT
   50     | VOID


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 15 16 17 41 42 43
')' (41) 4 15 16 17 41 42 43
'*' (42) 22
'+' (43) 20 34
',' (44) 8 47
'-' (45) 21 33
'/' (47) 23
';' (59) 13 14 18
'<' (60) 24
'=' (61) 40
'>' (62) 25
'{' (123) 10
'}' (125) 10
error (256)
INTEGER (258) 37
IDENTIFIER (259) 4 7 8 14 35 36 39 40 41 42
STRING_LIT (260) 38
INT (261) 48
FLOAT (262) 49
VOID (263) 50
IF (264) 15 16
ELSE (265) 16
WHILE (266) 17
FOR (267)
RETURN (268) 18
SCANF (269)
EQ (270) 28
NE (271) 29
LE (272) 26
GE (273) 27
AND (274) 30
OR (275) 31
INC (276) 35
DEC (277) 36
NOT (278) 32
IF_PREC (279)


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1 2, on right: 0 2
function_decl (40)
    on left: 4, on right: 1 2
$@1 (41)
    on left: 3, on right: 4
params (42)
    on left: 5 6, on right: 4
param_list (43)
    on left: 7 8, on right: 6 8
block (44)
    on left: 10, on right: 4 19
$@2 (45)
    on left: 9, on right: 10
stmt_list (46)
    on left: 11 12, on right: 10 12
stmt (47)
    on left: 13 14 15 16 17 18 19, on right: 12 15 16 17
expr (48)
    on left: 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
    38 39 40 41 42 43, on right: 13 15 16 17 18 20 21 22 23 24 25 26
    27 28 29 30 31 32 33 34 40 43 46 47
arg_list (49)
    on left: 44 45, on right: 42
arg_list_nonempty (50)
    on left: 46 47, on right: 45 47
type (51)
    on left: 48 49 50, on right: 4 7 8 14


state 0

    0 $accept: . program $end

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    program        go to state 4
    function_decl  go to state 5
    type           go to state 6


state 1

   48 type: INT .

    $default  reduce using rule 48 (type)


state 2

   49 type: FLOAT .

    $default  reduce using rule 49 (type)


state 3

   50 type: VOID .

    $default  reduce using rule 50 (type)


state 4

    0 $accept: program . $end
    2 program: program . function_decl

    $end   shift, and go to state 7
    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    function_decl  go to state 8
    type           go to state 6


state 5

    1 program: function_decl .

    $default  reduce using rule 1 (program)


state 6

    4 function_decl: type . IDENTIFIER '(' params ')' $@1 block

    IDENTIFIER  shift, and go to state 9


state 7

    0 $accept: program $end .

    $default  accept


state 8

    2 program: program function_decl .

    $default  reduce using rule 2 (program)


state 9

    4 function_decl: type IDENTIFIER . '(' params ')' $@1 block

    '('  shift, and go to state 10


state 10

    4 function_decl: type IDENTIFIER '(' . params ')' $@1 block

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    $default  reduce using rule 5 (params)

    params      go to state 11
    param_list  go to state 12
    type        go to state 13


state 11

    4 function_decl: type IDENTIFIER '(' params . ')' $@1 block

    ')'  shift, and go to state 14


state 12

    6 params: param_list .
    8 param_list: param_list . ',' type IDENTIFIER

    ','  shift, and go to state 15

    $default  reduce using rule 6 (params)


state 13

    7 param_list: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 16


state 14

    4 function_decl: type IDENTIFIER '(' params ')' . $@1 block

    $default  reduce using rule 3 ($@1)

    $@1  go to state 17


state 15

    8 param_list: param_list ',' . type IDENTIFIER

    INT    shift, and go to state 1
    FLOAT  shift, and go to state 2
    VOID   shift, and go to state 3

    type  go to state 18


state 16

    7 param_list: type IDENTIFIER .

    $default  reduce using rule 7 (param_list)


state 17

    4 function_decl: type IDENTIFIER '(' params ')' $@1 . block

    '{'  shift, and go to state 19

    block  go to state 20


state 18

    8 param_list: param_list ',' type . IDENTIFIER

    IDENTIFIER  shift, and go to state 21


state 19

   10 block: '{' . $@2 stmt_list '}'

    $default  reduce using rule 9 ($@2)

    $@2  go to state 22


state 20

    4 function_decl: type IDENTIFIER '(' params ')' $@1 block .

    $default  reduce using rule 4 (function_decl)


state 21

    8 param_list: param_list ',' type IDENTIFIER .

    $default  reduce using rule 8 (param_list)


state 22

   10 block: '{' $@2 . stmt_list '}'

    $default  reduce using rule 11 (stmt_list)

    stmt_list  go to state 23


state 23

   10 block: '{' $@2 stmt_list . '}'
   12 stmt_list: stmt_list . stmt

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    VOID        shift, and go to state 3
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    RETURN      shift, and go to state 29
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33
    '{'         shift, and go to state 19
    '}'         shift, and go to state 34

    block  go to state 35
    stmt   go to state 36
    expr   go to state 37
    type   go to state 38


state 24

   37 expr: INTEGER .

    $default  reduce using rule 37 (expr)


state 25

   35 expr: IDENTIFIER . INC
   36     | IDENTIFIER . DEC
   39     | IDENTIFIER .
   40     | IDENTIFIER . '=' expr
   41     | IDENTIFIER . '(' ')'
   42     | IDENTIFIER . '(' arg_list ')'

    INC  shift, and go to state 39
    DEC  shift, and go to state 40
    '('  shift, and go to state 41
    '='  shift, and go to state 42

    $default  reduce using rule 39 (expr)


state 26

   38 expr: STRING_LIT .

    $default  reduce using rule 38 (expr)


state 27

   15 stmt: IF . '(' expr ')' stmt
   16     | IF . '(' expr ')' stmt ELSE stmt

    '('  shift, and go to state 43


state 28

   17 stmt: WHILE . '(' expr ')' stmt

    '('  shift, and go to state 44


state 29

   18 stmt: RETURN . expr ';'

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 45


state 30

   32 expr: NOT . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 46


state 31

   34 expr: '+' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 47


state 32

   33 expr: '-' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 48


state 33

   43 expr: '(' . expr ')'

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 49


state 34

   10 block: '{' $@2 stmt_list '}' .

    $default  reduce using rule 10 (block)


state 35

   19 stmt: block .

    $default  reduce using rule 19 (stmt)


state 36

   12 stmt_list: stmt_list stmt .

    $default  reduce using rule 12 (stmt_list)


state 37

   13 stmt: expr . ';'
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    ';'  shift, and go to state 62


state 38

   14 stmt: type . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 63


state 39

   35 expr: IDENTIFIER INC .

    $default  reduce using rule 35 (expr)


state 40

   36 expr: IDENTIFIER DEC .

    $default  reduce using rule 36 (expr)


state 41

   41 expr: IDENTIFIER '(' . ')'
   42     | IDENTIFIER '(' . arg_list ')'

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33
    ')'         shift, and go to state 64

    ')'  [reduce using rule 44 (arg_list)]

    expr               go to state 65
    arg_list           go to state 66
    arg_list_nonempty  go to state 67


state 42

   40 expr: IDENTIFIER '=' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 68


state 43

   15 stmt: IF '(' . expr ')' stmt
   16     | IF '(' . expr ')' stmt ELSE stmt

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 69


state 44

   17 stmt: WHILE '(' . expr ')' stmt

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 70


state 45

   18 stmt: RETURN expr . ';'
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    ';'  shift, and go to state 71


state 46

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   32     | NOT expr .

    $default  reduce using rule 32 (expr)


state 47

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   34     | '+' expr .

    $default  reduce using rule 34 (expr)


state 48

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   33     | '-' expr .

    $default  reduce using rule 33 (expr)


state 49

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   43     | '(' expr . ')'

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    ')'  shift, and go to state 72


state 50

   28 expr: expr EQ . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 73


state 51

   29 expr: expr NE . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 74


state 52

   26 expr: expr LE . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 75


state 53

   27 expr: expr GE . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 76


state 54

   30 expr: expr AND . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 77


state 55

   31 expr: expr OR . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 78


state 56

   24 expr: expr '<' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 79


state 57

   25 expr: expr '>' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 80


state 58

   20 expr: expr '+' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 81


state 59

   21 expr: expr '-' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 82


state 60

   22 expr: expr '*' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 83


state 61

   23 expr: expr '/' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 84


state 62

   13 stmt: expr ';' .

    $default  reduce using rule 13 (stmt)


state 63

   14 stmt: type IDENTIFIER . ';'

    ';'  shift, and go to state 85


state 64

   41 expr: IDENTIFIER '(' ')' .

    $default  reduce using rule 41 (expr)


state 65

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   46 arg_list_nonempty: expr .

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    $default  reduce using rule 46 (arg_list_nonempty)


state 66

   42 expr: IDENTIFIER '(' arg_list . ')'

    ')'  shift, and go to state 86


state 67

   45 arg_list: arg_list_nonempty .
   47 arg_list_nonempty: arg_list_nonempty . ',' expr

    ','  shift, and go to state 87

    $default  reduce using rule 45 (arg_list)


state 68

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   40     | IDENTIFIER '=' expr .

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    EQ        [reduce using rule 40 (expr)]
    NE        [reduce using rule 40 (expr)]
    LE        [reduce using rule 40 (expr)]
    GE        [reduce using rule 40 (expr)]
    AND       [reduce using rule 40 (expr)]
    OR        [reduce using rule 40 (expr)]
    '<'       [reduce using rule 40 (expr)]
    '>'       [reduce using rule 40 (expr)]
    '+'       [reduce using rule 40 (expr)]
    '-'       [reduce using rule 40 (expr)]
    '*'       [reduce using rule 40 (expr)]
    '/'       [reduce using rule 40 (expr)]
    $default  reduce using rule 40 (expr)


state 69

   15 stmt: IF '(' expr . ')' stmt
   16     | IF '(' expr . ')' stmt ELSE stmt
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    ')'  shift, and go to state 88


state 70

   17 stmt: WHILE '(' expr . ')' stmt
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61
    ')'  shift, and go to state 89


state 71

   18 stmt: RETURN expr ';' .

    $default  reduce using rule 18 (stmt)


state 72

   43 expr: '(' expr ')' .

    $default  reduce using rule 43 (expr)


state 73

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   28     | expr EQ expr .
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    EQ  error (nonassociative)
    NE  error (nonassociative)

    $default  reduce using rule 28 (expr)


state 74

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   29     | expr NE expr .
   30     | expr . AND expr
   31     | expr . OR expr

    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    EQ  error (nonassociative)
    NE  error (nonassociative)

    $default  reduce using rule 29 (expr)


state 75

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   26     | expr LE expr .
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    LE   error (nonassociative)
    GE   error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    $default  reduce using rule 26 (expr)


state 76

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   27     | expr GE expr .
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    LE   error (nonassociative)
    GE   error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    $default  reduce using rule 27 (expr)


state 77

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   30     | expr AND expr .
   31     | expr . OR expr

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    $default  reduce using rule 30 (expr)


state 78

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   31     | expr OR expr .

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    $default  reduce using rule 31 (expr)


state 79

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   24     | expr '<' expr .
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    LE   error (nonassociative)
    GE   error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    $default  reduce using rule 24 (expr)


state 80

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   25     | expr '>' expr .
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    LE   error (nonassociative)
    GE   error (nonassociative)
    '<'  error (nonassociative)
    '>'  error (nonassociative)

    $default  reduce using rule 25 (expr)


state 81

   20 expr: expr . '+' expr
   20     | expr '+' expr .
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    $default  reduce using rule 20 (expr)


state 82

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    $default  reduce using rule 21 (expr)


state 83

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    $default  reduce using rule 22 (expr)


state 84

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr

    $default  reduce using rule 23 (expr)


state 85

   14 stmt: type IDENTIFIER ';' .

    $default  reduce using rule 14 (stmt)


state 86

   42 expr: IDENTIFIER '(' arg_list ')' .

    $default  reduce using rule 42 (expr)


state 87

   47 arg_list_nonempty: arg_list_nonempty ',' . expr

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33

    expr  go to state 90


state 88

   15 stmt: IF '(' expr ')' . stmt
   16     | IF '(' expr ')' . stmt ELSE stmt

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    VOID        shift, and go to state 3
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    RETURN      shift, and go to state 29
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33
    '{'         shift, and go to state 19

    block  go to state 35
    stmt   go to state 91
    expr   go to state 37
    type   go to state 38


state 89

   17 stmt: WHILE '(' expr ')' . stmt

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    VOID        shift, and go to state 3
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    RETURN      shift, and go to state 29
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33
    '{'         shift, and go to state 19

    block  go to state 35
    stmt   go to state 92
    expr   go to state 37
    type   go to state 38


state 90

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   24     | expr . '<' expr
   25     | expr . '>' expr
   26     | expr . LE expr
   27     | expr . GE expr
   28     | expr . EQ expr
   29     | expr . NE expr
   30     | expr . AND expr
   31     | expr . OR expr
   47 arg_list_nonempty: arg_list_nonempty ',' expr .

    EQ   shift, and go to state 50
    NE   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    AND  shift, and go to state 54
    OR   shift, and go to state 55
    '<'  shift, and go to state 56
    '>'  shift, and go to state 57
    '+'  shift, and go to state 58
    '-'  shift, and go to state 59
    '*'  shift, and go to state 60
    '/'  shift, and go to state 61

    $default  reduce using rule 47 (arg_list_nonempty)


state 91

   15 stmt: IF '(' expr ')' stmt .
   16     | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 93

    ELSE      [reduce using rule 15 (stmt)]
    $default  reduce using rule 15 (stmt)


state 92

   17 stmt: WHILE '(' expr ')' stmt .

    $default  reduce using rule 17 (stmt)


state 93

   16 stmt: IF '(' expr ')' stmt ELSE . stmt

    INTEGER     shift, and go to state 24
    IDENTIFIER  shift, and go to state 25
    STRING_LIT  shift, and go to state 26
    INT         shift, and go to state 1
    FLOAT       shift, and go to state 2
    VOID        shift, and go to state 3
    IF          shift, and go to state 27
    WHILE       shift, and go to state 28
    RETURN      shift, and go to state 29
    NOT         shift, and go to state 30
    '+'         shift, and go to state 31
    '-'         shift, and go to state 32
    '('         shift, and go to state 33
    '{'         shift, and go to state 19

    block  go to state 35
    stmt   go to state 94
    expr   go to state 37
    type   go to state 38


state 94

   16 stmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 16 (stmt)
